/*!
<https://github.com/grpc/grpc-go/blob/master/codes/codes.go>
*/

/// A Code is an unsigned 32-bit error code as defined in the gRPC spec.
pub enum Code {
    /// OK is returned on success.
    OK = 0,

    /**
    Operation was cancelled (typically by the caller).

    The gRPC framework will generate this error code when cancellation is requested.
    */
    Cancelled = 1,

    /*
    Unknown error. An example of where this error may be returned is if a Status value received from another address space belongs to an error-space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error.

    The gRPC framework will generate this error code in the above two mentioned cases.
    */
    Unknown = 2,

    /**
    Client specified an invalid argument.
    Note that this differs from FailedPrecondition. It indicates arguments that are problematic regardless of the state of the system
    (e.g., a malformed file name).

    This error code will not be generated by the gRPC framework.
    */
    InvalidArgument = 3,

    /**
    Operation expired before completion.
    For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire.

    The gRPC framework will generate this error code when the deadline is exceeded.
    */
    DeadlineExceeded = 4,

    /**
    Some requested entity (e.g., file or directory) was not found.

    This error code will not be generated by the gRPC framework.
    */
    NotFound = 5,

    /**
    An attempt to create an entity failed because one already exists.

    This error code will not be generated by the gRPC framework.
    */
    AlreadyExists = 6,

    /**
    Caller does not have permission to execute the specified operation. It must not be used for rejections caused by exhausting some resource (use ResourceExhausted instead for those errors). It must not be used if the caller cannot be identified (use Unauthenticated instead for those errors).

    This error code will not be generated by the gRPC core framework, but expect authentication middleware to use it.
    */
    PermissionDenied = 7,

    /**
    Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space.

    This error code will be generated by the gRPC framework in out-of-memory and server overload situations, or when a message is larger than the configured maximum size.
    */
    ResourceExhausted = 8,

    /**
    Operation was rejected because the system is not in a state required for the operation's execution.
    For example, directory to be deleted may be non-empty, an rmdir operation is applied to a non-directory, etc.

    A litmus test that may help a service implementor in deciding between FailedPrecondition, Aborted, and Unavailable:

    (a) Use Unavailable if the client can retry just the failing call.
    (b) Use Aborted if the client should retry at a higher-level
        (e.g., restarting a read-modify-write sequence).
    (c) Use FailedPrecondition if the client should not retry until
        the system state has been explicitly fixed. E.g., if an "rmdir"
        fails because the directory is non-empty, FailedPrecondition
        should be returned since the client should not retry unless
        they have first fixed up the directory by deleting files from it.
    (d) Use FailedPrecondition if the client performs conditional
        REST Get/Update/Delete on a resource and the resource on the
        server does not match the condition. E.g., conflicting
        read-modify-write on the same resource.

    This error code will not be generated by the gRPC framework.
    */
    FailedPrecondition = 9,

    /**
    Operation was aborted, typically due to a concurrency issue like sequencer check failures, transaction aborts, etc.

    See litmus test above for deciding between FailedPrecondition, Aborted, and Unavailable.

    This error code will not be generated by the gRPC framework.
    */
    Aborted = 10,

    /**
    Operation was attempted past the valid range.
    E.g., seeking or reading past end of file.

    Unlike InvalidArgument, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate InvalidArgument if asked to read at an offset that is not in the range [0,2^32-1], but it will generate OutOfRange if asked to read from an offset past the current file size.

    There is a fair bit of overlap between FailedPrecondition and OutOfRange. We recommend using OutOfRange (the more specific error) when it applies so that callers who are iterating through a space can easily look for an OutOfRange error to detect when they are done.

    This error code will not be generated by the gRPC framework.
    */
    OutOfRange = 11,

    /**
    Operation is not implemented or not supported/enabled in this service.

    This error code will be generated by the gRPC framework. Most commonly, you will see this error code when a method implementation is missing on the server. It can also be generated for unknown compression algorithms or a disagreement as to whether an RPC should be streaming.
    */
    Unimplemented = 12,

    /**
    Internal errors. Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken.

    This error code will be generated by the gRPC framework in several internal error conditions.
    */
    Internal = 13,

    /**
    Service is currently unavailable.
    This is a most likely a transient condition and may be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations.

    See litmus test above for deciding between FailedPrecondition, Aborted, and Unavailable.

    This error code will be generated by the gRPC framework during abrupt shutdown of a server process or network connection.
    */
    Unavailable = 14,

    /**
    Unrecoverable data loss or corruption.

    This error code will not be generated by the gRPC framework.
    */
    DataLoss = 15,

    /**
    Request does not have valid authentication credentials for the operation.

    The gRPC framework will generate this error code when the authentication metadata is invalid or a Credentials callback fails, but also expect authentication middleware to generate it.
    */
    Unauthenticated = 16,

    _maxCode = 17
}

// UnmarshalJSON unmarshals b into the Code.
pub fn (c *Code) UnmarshalJSON(b: Vec<u8>) -> error {
    // From json.Unmarshaler: By convention, to approximate the behavior of
    // Unmarshal itself, Unmarshalers implement UnmarshalJSON([]byte("null")) as
    // a no-op.
    if string(b) == "null" {
        return nil
    }
    if ci, err = strconv.ParseUint(string(b), 10, 32); err == nil {
        if ci >= _maxCode {
            return fmt.Errorf("invalid code: %q", ci)
        }

        *c = Code(ci)
        return nil
    }

    if jc, ok := strToCode[string(b)]; ok {
        *c = jc
        return nil
    }
}
