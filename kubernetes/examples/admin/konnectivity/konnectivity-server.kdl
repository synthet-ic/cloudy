namespace "kube-system" {
  pod "konnectivity-server" version="v1" {
    spec priority-class-name="system-cluster-critical" host-network {
    container "konnectivity-server-container" image="registry.k8s.io/kas-network-proxy/proxy-server" {
      command "/proxy-server"
      args
        "--logtostderr=true",
        "--uds-name=/etc/kubernetes/konnectivity-server/konnectivity-server.socket",
        "--cluster-cert=/etc/kubernetes/pki/apiserver.crt",
        "--cluster-key=/etc/kubernetes/pki/apiserver.key",
        "--mode=grpc",
        "--server-port=0",
        "--agent-port=8132",
        "--admin-port=8133",
        "--health-port=8134",
        "--agent-namespace=kube-system",
        "--agent-service-account=konnectivity-agent",
        "--kubeconfig=/etc/kubernetes/konnectivity-server.conf",
        "--authentication-audience=system:konnectivity-server"
      liveness-probe initial-delay-seconds=30 timeout-seconds=60 {
        http-get scheme="http" host="127.0.0.1" port=8134 path="/healthz"
      }
      port "agent-port" container-port=8132 host-port=8132
      port "admin-port" container-port=8133 host-port=8133
      port "health-port" container-port=8134 host-port=8134
      volume-mount "k8s-certs" path="/etc/kubernetes/pki" read-only
      volume-mount "kubeconfig" path="/etc/kubernetes/konnectivity-server.conf" read-only
      volume-mount "konnectivity-uds" path="/etc/kubernetes/konnectivity-server" read-only=false
    }
    volume "k8s-certs" {
      host-path "/etc/kubernetes/pki"
    }
    volume "kubeconfig" {
      host-path "/etc/kubernetes/konnectivity-server.conf" type="FileOrCreate"
    }
    volume "konnectivity-uds" {
      host-path "/etc/kubernetes/konnectivity-server" type="DirectoryOrCreate"
    }
  }
}
